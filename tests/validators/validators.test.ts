import { describe, expect, it } from "@jest/globals";
import {
  getTypeAliasTypeStructure,
  getVariableTypeStructure,
} from "../../jest/testFileTypeKeyValues";

describe("primitive array schema", () => {
  it("should infer number and string arrays", () => {
    expect(
      getTypeAliasTypeStructure([__dirname, "validators.ts"], "myObject")
    ).toEqual({
      string: "string",
      alphanumeric: "string",
      ascii: "string",
      base32: "string",
      base58: "string",
      base64: "string",
      boolean: "boolean",
      btcAddress: "string",
      currency: "string",
      dataURI: "string",
      decimal: "number",
      email: "string",
      ethereumAddress: "string",
      float: "number",
      hash: "string",
      hexColor: "string",
      hexadecimal: "string",
      int: "number",

      // TODO work these

      after: "unknown",
      alpha: "unknown",
      array: "unknown",
      object: "unknown",
      before: "unknown",
      bIC: "unknown",
      byteLength: "unknown",
      creditCard: "unknown",
      date: "unknown",
      divisibleBy: "unknown",
      eAN: "unknown",
      empty: "unknown",
      fQDN: "unknown",
      fullWidth: "unknown",
      halfWidth: "unknown",
      hSL: "unknown",
      iBAN: "unknown",
      identityCard: "unknown",
      iMEI: "unknown",
      iP: "unknown",
      iPRange: "unknown",
      iSBN: "unknown",
      iSSN: "unknown",
      iSIN: "unknown",
      iSO8601: "unknown",
      iSO31661Alpha2: "unknown",
      iSO31661Alpha3: "unknown",
      iSO4217: "unknown",
      iSRC: "unknown",
      in: "unknown",
      jSON: "unknown",
      jWT: "unknown",
      latLong: "unknown",
      length: "unknown",
      licensePlate: "unknown",
      locale: "unknown",
      lowercase: "unknown",
      magnetURI: "unknown",
      mACAddress: "unknown",
      mD5: "unknown",
      mimeType: "unknown",
      mobilePhone: "unknown",
      mongoId: "unknown",
      multibyte: "unknown",
      numeric: "unknown",
      octal: "unknown",
      passportNumber: "unknown",
      port: "unknown",
      postalCode: "unknown",
      rgbColor: "unknown",
      rFC3339: "unknown",
      semVer: "unknown",
      slug: "unknown",
      strongPassword: "unknown",
      surrogatePair: "unknown",
      taxID: "unknown",
      uRL: "unknown",
      uUID: "unknown",
      uppercase: "unknown",
      variableWidth: "unknown",
      vAT: "unknown",
      whitelisted: "unknown",
    });
  });
});
